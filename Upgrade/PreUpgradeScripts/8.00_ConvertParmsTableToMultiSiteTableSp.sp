SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

IF OBJECT_ID('[dbo].[MG8.00_ConvertParmsTableToMultiSiteTableSp]') IS NOT NULL
   DROP PROCEDURE [dbo].[MG8.00_ConvertParmsTableToMultiSiteTableSp]
GO
/* $Header: /Tools/SQLScripts/Upgrade/PreUpgradeScripts/8.00_ConvertParmsTableToMultiSiteTableSp.sp 3     12/09/16 8:44a Mhuston $ */

/*
***************************************************************
*                                                             *
*                           NOTICE                            *
*                                                             *
*   THIS SOFTWARE IS THE PROPERTY OF AND CONTAINS             *
*   CONFIDENTIAL INFORMATION OF INFOR AND/OR ITS AFFILIATES   *
*   OR SUBSIDIARIES AND SHALL NOT BE DISCLOSED WITHOUT PRIOR  *
*   WRITTEN PERMISSION. LICENSED CUSTOMERS MAY COPY AND       *
*   ADAPT THIS SOFTWARE FOR THEIR OWN USE IN ACCORDANCE WITH  *
*   THE TERMS OF THEIR SOFTWARE LICENSE AGREEMENT.            *
*   ALL OTHER RIGHTS RESERVED.                                *
*                                                             *
*   (c) COPYRIGHT 2013 INFOR.  ALL RIGHTS RESERVED.           *
*   THE WORD AND DESIGN MARKS SET FORTH HEREIN ARE            *
*   TRADEMARKS AND/OR REGISTERED TRADEMARKS OF INFOR          *
*   AND/OR ITS AFFILIATES AND SUBSIDIARIES. ALL RIGHTS        *
*   RESERVED.  ALL OTHER TRADEMARKS LISTED HEREIN ARE         *
*   THE PROPERTY OF THEIR RESPECTIVE OWNERS.                  *
*                                                             *
***************************************************************
*/

CREATE PROCEDURE [dbo].[MG8.00_ConvertParmsTableToMultiSiteTableSp] (
   @DatabaseName ObjectNameType
 , @DatabaseSchema ObjectNameType
 , @OrigTableName ObjectNameType
 , @Site SiteType
 , @SiteColumn ColumnNameType
 , @FullTextIndexString [NVARCHAR](max) OUTPUT
 , @Infobar InfobarType OUTPUT
)
AS
-- Check for existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp and inserted by CallETPs.exe):
IF OBJECT_ID(N'dbo.[EXTGEN_MG8.00_ConvertParmsTableToMultiSiteTableSp]') IS NOT NULL
BEGIN
   DECLARE @EXTGEN_SpName sysname
   SET @EXTGEN_SpName = N'dbo.[EXTGEN_MG8.00_ConvertParmsTableToMultiSiteTableSp]'
   -- Invoke the ETP routine, passing in (and out) this routine's parameters:
   DECLARE @EXTGEN_Severity int 
   EXEC @EXTGEN_Severity = @EXTGEN_SpName 
      @DatabaseName
    , @DatabaseSchema
    , @OrigTableName
    , @Site
    , @SiteColumn
    , @FullTextIndexString OUTPUT
    , @Infobar OUTPUT
     
 -- ETP routine can RETURN 1 to signal that the remainder of this standard routine should now proceed: 
   IF @EXTGEN_Severity <> 1 
      RETURN @EXTGEN_Severity 
END 
-- End of Generic External Touch Point code. 

----============================================================================================
----============================================================================================
--- 1. Declare variables and temp tables ------------------------------------------------------------------------------
DECLARE
   @Severity INT
 , @MultiSiteTableName ObjectNameType
 , @MultiSiteTableSuffix [NVARCHAR] (4)
 , @REMessage NVARCHAR(MAX)
 , @ShowMessages TINYINT
 , @ConstraintName NVARCHAR(MAX)
 , @SQL NVARCHAR(MAX)
 , @SqlCreateTableText NVARCHAR(MAX)
 , @ColumnList NVARCHAR(MAX)
 , @ColumnValueList NVARCHAR(MAX)
 , @IdentityInsertText NVARCHAR(100)
 , @IdentityInsertOn NVARCHAR(100)
 , @IdentityInsertOff NVARCHAR(100)
 , @SqlInsertMultiSiteTableText NVARCHAR(MAX)
 , @SqlDropTableText NVARCHAR(MAX)
 , @MasterSite SiteType

SET @Infobar = NULL
SET @ShowMessages = 0
SET @MultiSiteTableSuffix = N'_mst'

DECLARE @TableText TABLE (
   CodeLine   NVARCHAR(MAX) NOT NULL
 , CreateOnly TINYINT DEFAULT(1) NULL
 , RowPointer INT IDENTITY(1,1)  NOT NULL
 , Altered TINYINT DEFAULT(0)
)

DECLARE @TableColumn TABLE (
   [TableName] SYSNAME
 , [ColumnName] NVARCHAR(MAX)
 , [UpdateText] NVARCHAR(MAX)
)

SET @REMessage= N'Converting Table: ' + @OrigTableName
IF @ShowMessages=1 RAISERROR(@REMessage, 0, 1) WITH NOWAIT

IF @OrigTableName LIKE N'%[_]all'
   SET @MultiSiteTableName = REPLACE(@OrigTableName, N'_all', @MultiSiteTableSuffix + N'_all')
ELSE
   SET @MultiSiteTableName = @OrigTableName + @MultiSiteTableSuffix

----============================================================================================
----============================================================================================
--- 2. Capture original table script components; divide into barebones and addl components; add @SiteColumn column ----------------

INSERT INTO @TableText (CodeLine)
EXEC [dbo].[MultiSiteTableScriptSp] 
   @DatabaseSchema
 , @OrigTableName
 , @MultiSiteTableSuffix
 , @SiteColumn
   --Expected results....
   --CREATE TABLE customer_mst (
   --  [site_ref] SiteType NOT NULL CONSTRAINT [DF_customer_mst_site_ref] DEFAULT (cast(CONTEXT_INFO() as NVARCHAR(8)))
   --  [cust_num] CustNumType NOT NULL 
   --, [cust_seq] CustSeqType NOT NULL CONSTRAINT [DF_customer_mst_cust_seq] DEFAULT ((0))
   --, [contact##1] ContactType NULL 
   --.
   --.
   --, CONSTRAINT [CK_customer_mst_use_revision_pay_days] CHECK ([use_revision_pay_days]=(0) OR [use_revision_pay_days]=(1))
   --, CONSTRAINT [IX_customer_mst_RowPointer] UNIQUE NONCLUSTERED (RowPointer)
   --, CONSTRAINT [PK_customer_mst] PRIMARY KEY CLUSTERED (cust_num, cust_seq, site_ref)
   --)
   --.
   --.
   --CREATE NONCLUSTERED INDEX [IX_customer_mst_delterm] ON customer_mst (delterm)
   --.
   --.

--Delete any foreign key references; these will be added back later as part of another script
DELETE FROM @TableText
   WHERE (CodeLine LIKE '%FOREIGN KEY%')	

--Store off Full-Text Index if one existed & Delete from @TableText
--This will be used to add Full-Text Index to new Multi-Site Table
SELECT @FullTextIndexString = COALESCE(@FullTextIndexString + N' ',N'') + CodeLine
FROM @TableText
WHERE 1=1
  AND (CodeLine LIKE '%FULLTEXT INDEX%')

DELETE FROM @TableText
   WHERE (CodeLine LIKE '%FULLTEXT INDEX%')

----============================================================================================
----============================================================================================
--- 3. Create Multi-Site Table ----------------------------------------------------------------------------------------

----Concatenate all CREATE TABLE commands

SELECT @SqlCreateTableText = COALESCE(@SqlCreateTableText + N' ',N'') + CodeLine
FROM @TableText
WHERE 1=1

IF @SqlCreateTableText IS NOT NULL
BEGIN
   SET @REMessage=N'   Creating Multi-Site Table with @SiteColumn Column: ' + @MultiSiteTableName
   IF @ShowMessages=1 RAISERROR(@REMessage, 0, 1) WITH NOWAIT
   EXEC sp_executesql @SqlCreateTableText
END

------============================================================================================
------============================================================================================
------4. Copy data from old table to new Multi-Site Colum; default site data into new column ----------------------------

---- Only do this for non _all tables as Update _All Table utility will handle repopulating _all tables from base tables

----Get table columns
IF @MultiSiteTableName NOT LIKE N'%[_]all'
BEGIN
   INSERT INTO @TableColumn (
      [TableName]
    , [ColumnName]
    , [UpdateText]
   )
   SELECT 
      ISC.TABLE_NAME--table name
    , ISC.COLUMN_NAME--column name
    , CASE
         WHEN ISC.COLUMN_NAME = @SiteColumn THEN
            @Site
         ELSE
            ISC.COLUMN_NAME--update text
      END
   FROM INFORMATION_SCHEMA.COLUMNS ISC
      INNER JOIN sys.columns AS sc
         ON OBJECT_NAME(sc.object_id) = ISC.TABLE_NAME
        AND sc.name = ISC.COLUMN_NAME
      LEFT OUTER JOIN INFORMATION_SCHEMA.COLUMN_DOMAIN_USAGE ISCDU
         ON ISCDU.COLUMN_NAME = ISC.COLUMN_NAME
        AND ISCDU.TABLE_NAME = ISC.TABLE_NAME
        AND ISCDU.TABLE_SCHEMA = ISC.TABLE_SCHEMA
   WHERE 1=1
     AND ISC.TABLE_NAME = @MultiSiteTableName
     AND ISC.TABLE_SCHEMA = @DatabaseSchema
     AND sc.is_computed = 0
     AND ISC.DATA_TYPE <> 'timestamp'
   ORDER BY ISC.COLUMN_NAME

   --Build a comma-separated string of all table columns			
   SELECT @ColumnList = COALESCE(@ColumnList + ', ',N'') + '[' + [ColumnName] + ']'
   FROM @TableColumn
   WHERE [TableName]=@MultiSiteTableName

   --Build a comma-separated string of all table columns
   SELECT 
      @ColumnValueList = COALESCE(@ColumnValueList + N', ',N'') + 
                          CASE
                             WHEN [ColumnName] = @SiteColumn THEN
                                N'''' + [UpdateText] + N''''
                             ELSE
                                [UpdateText]
                          END
   FROM @TableColumn
   WHERE [TableName]=@MultiSiteTableName

   --Determine if table has column identified as IDENTITY.  if so, turn IDENTITY_INSERT property ON
   
   SET @IdentityInsertOn=N''
   SET @IdentityInsertOff=N''
   IF EXISTS (SELECT 1 FROM sys.columns WHERE object_id=OBJECT_ID(@OrigTableName) AND ISNULL(is_identity,0)=1)
   BEGIN
      SET @IdentityInsertText = N'SET IDENTITY_INSERT ' + @DatabaseSchema + '.' + @MultiSiteTableName 
      SET @IdentityInsertOn=@IdentityInsertText + N' ON '
      SET @IdentityInsertOff=@IdentityInsertText + N' OFF '
   END

   SET @SqlInsertMultiSiteTableText = @IdentityInsertOn 
                     + N'INSERT INTO [' + @DatabaseSchema + '].[' + @MultiSiteTableName +'] ('+ @ColumnList +') '
                     + N'SELECT ' + @ColumnValueList + ' FROM [' + @DatabaseSchema + '].[' + @OrigTableName + '] WITH(READUNCOMMITTED) '
                     + @IdentityInsertOff

   --Insert data into new multi-site table
   IF @SqlInsertMultiSiteTableText IS NOT NULL
   BEGIN
      SET @REMessage=N'	Copy Data from Orig Table to Multi-Site Table'
      IF @ShowMessages=1 RAISERROR(@REMessage, 0, 1) WITH NOWAIT
      EXEC sp_executesql @SqlInsertMultiSiteTableText
   END
END

----5. Drop old table -------------------------------------------------------------------------------------------------

SELECT TOP 1 @MasterSite = MasterSite
   FROM IntranetSharedUserTable IST 
      INNER JOIN Intranet IT ON IST.IntranetName = IT.intranet_name
      INNER JOIN PARMS PM    ON IT.MasterSite    = PM.site
   WHERE IST.TableName = @OrigTableName AND IST.Shared = 1 AND IST.Processed = 1

SET @SqlDropTableText = N'IF EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N''' + 
                  @DatabaseSchema + N'.[' + @OrigTableName + N']''
                  ) AND type in (N''U'')) DROP TABLE ' 
                  + @DatabaseSchema + N'.[' + @OrigTableName + N'] '

IF @SqlDropTableText IS NOT NULL
BEGIN
   SET @REMessage=N'	Dropping Orig Table: ' + @OrigTableName
   IF @ShowMessages=1 RAISERROR(@REMessage, 0, 1) WITH NOWAIT
   EXEC sp_executesql @SqlDropTableText
END

----============================================================================================
----============================================================================================
----6. Create View with Original Table Name over New Multi-Site Table -------------------------------------------------

SET @REMessage=N'	Creating View: ' + @OrigTableName + N' Over Multi-Site Table: ' + @MultiSiteTableName
IF @ShowMessages=1 RAISERROR(@REMessage, 0, 1) WITH NOWAIT

DECLARE @IncludeSiteRefFilter ListYesNoType = 0
SET @IncludeSiteRefFilter = CASE
                               WHEN @OrigTableName LIKE N'%[_]all' THEN
                                  0
                               ELSE
                                  1
                            END

EXECUTE @Severity = [dbo].[MG8.00_RegenerateSiteViewForParmsSp]
   @TableName = @MultiSiteTableName
 , @IncludeSiteRefFilter = @IncludeSiteRefFilter 
 , @MasterSite = @MasterSite
 , @Infobar = @Infobar OUTPUT

IF @Severity != 0
   RETURN @Severity
----============================================================================================
----============================================================================================
	 
SET @REMessage= N'Converting: ' + @OrigTableName + N' to Multi-Site Table: ' + @MultiSiteTableName + N' complete'
IF @ShowMessages=1 RAISERROR(@REMessage, 0, 1) WITH NOWAIT

DELETE @TableText

----============================================================================================
----============================================================================================

RETURN 0
GO
