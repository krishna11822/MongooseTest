SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
IF OBJECT_ID('dbo.TriggerIupCodeWrapperSp') IS NOT NULL
   DROP PROCEDURE dbo.TriggerIupCodeWrapperSp
GO
/* $Header: ApplicationDB\Stored Procedures\TriggerIupCodeWrapperSp.sp 10.1.0.1 03/30/2018 14:27:37 */
/*
***************************************************************
*                                                             *
*                           NOTICE                            *
*                                                             *
*   THIS SOFTWARE IS THE PROPERTY OF AND CONTAINS             *
*   CONFIDENTIAL INFORMATION OF INFOR AND/OR ITS AFFILIATES   *
*   OR SUBSIDIARIES AND SHALL NOT BE DISCLOSED WITHOUT PRIOR  *
*   WRITTEN PERMISSION. LICENSED CUSTOMERS MAY COPY AND       *
*   ADAPT THIS SOFTWARE FOR THEIR OWN USE IN ACCORDANCE WITH  *
*   THE TERMS OF THEIR SOFTWARE LICENSE AGREEMENT.            *
*   ALL OTHER RIGHTS RESERVED.                                *
*                                                             *
*   (c) COPYRIGHT 2018 INFOR.  ALL RIGHTS RESERVED.           *
*   THE WORD AND DESIGN MARKS SET FORTH HEREIN ARE            *
*   TRADEMARKS AND/OR REGISTERED TRADEMARKS OF INFOR          *
*   AND/OR ITS AFFILIATES AND SUBSIDIARIES. ALL RIGHTS        *
*   RESERVED.  ALL OTHER TRADEMARKS LISTED HEREIN ARE         *
*   THE PROPERTY OF THEIR RESPECTIVE OWNERS.                  *
*                                                             *
***************************************************************
*/
/* $Archive: /Tools/SQLScripts/ApplicationDB/Stored Procedures/TriggerIupCodeWrapperSp.sp $
 *
 * CoreDev 10 252211 johndou Fri Apr 12 08:23:40 2010
 * Issue #252211 - Temp table collation update.
 *
 * CoreDev 9 248405 DJohnson Thu Oct 04
 * Add dbo. schema to path where missing.
 *
 * CoreDev  246084 : Make readpast work in snapshot isolation. Jun 25, 2018
 *
 * Core90310 7 230733 Djohnson Mon Jul 10 12:31:32 2017
 * Timeout using New Data Maintenance Wizard
 * Issue #230733 - Do not generate app specific trigger modifications unless the tables are involved in the input range.
 *
 * CoreDev 6 RS7915 Dlai Thu Feb 16 01:07:39 2017
 * RS7915 Add to call sp TriggerInsertAppCodeSp to add application level trigger content by modifying existing core trigger
 *
 * CoreDev 5 182934 Nthurn Mon Sep 08 15:08:05 2014
 * Unsuccessful run trigger management when tables exist outside "dbo" schema
 * Don't count tables that TriggerIupCodeSp ignores.
 *
 * CoreDev 4 151347 Djohnson Fri Jul 20 16:51:39 2012
 * deadlock if multiple users execute finish on new data maint wizard at the same time
 * Issue #151347 - Put a readpast in to avoid deadlock.
 *
 * CoreDev 3 rs4588 Dahn Mon Mar 08 08:30:01 2010
 * rs4588 copyright header changes.
 *
 * CoreDev 2 115293 Nthurn Thu Nov 06 11:40:11 2008
 * Summary message missing and individual table messages not needed
 * Workedaround Issue 115295.  (correction to initial Version)
 *
 * CoreDev 1 RS4039 Nthurn Tue Oct 28 17:34:19 2008
 * Wrapper/executor for TriggerIupCodeSp.  (RS4039)
 *
 * CoreDev 1 RS9110 dartiaga 02/11/2021
 * RS9110 - Add code to update table hash on manual regen
 *
 * $NoKeywords: $
 */
CREATE PROCEDURE dbo.TriggerIupCodeWrapperSp (
   @StartingTableName sysname,
   @EndingTableName sysname,
   @Infobar InfobarType OUTPUT
) AS

   -- Check for existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp and inserted by CallETPs.exe):
   IF OBJECT_ID(N'dbo.EXTGEN_TriggerIupCodeWrapperSp') IS NOT NULL
   BEGIN
      DECLARE @EXTGEN_SpName sysname
      SET @EXTGEN_SpName = N'dbo.EXTGEN_TriggerIupCodeWrapperSp'
      -- Invoke the ETP routine, passing in (and out) this routine's parameters:
      DECLARE @EXTGEN_Severity int
      EXEC @EXTGEN_Severity = @EXTGEN_SpName
         @StartingTableName,
         @EndingTableName,
         @Infobar OUTPUT
 
      -- ETP routine can RETURN 1 to signal that the remainder of this standard routine should now proceed:
      IF @EXTGEN_Severity <> 1
         RETURN @EXTGEN_Severity
   END
   -- End of Generic External Touch Point code.
 
SET NOCOUNT ON

DECLARE
  @Severity INT
, @SQL nvarchar(MAX)
, @CodeLine LongListType
, @NewLine nvarchar(2)
, @NonBlank ListYesNoType
, @TablesProcessed INT

SET @Severity = 0
set @NewLine = nchar(13) + nchar(10)
SET @TablesProcessed = 0

-- used to capture output from TriggerIupCodeSp
if object_id('tempdb..#TriggerIupCode') is null
   create table #TriggerIupCode (
     seq int identity
   , code_line nvarchar(4000) collate database_default
   )


-- Loop through tables in selected range:
DECLARE t CURSOR local static FOR
SELECT TABLE_NAME FROM SchemaTablesView WITH (READPAST, READCOMMITTEDLOCK)
WHERE TABLE_TYPE <> N'VIEW'
AND (@StartingTableName IS NULL OR TABLE_NAME >= @StartingTableName)
AND (@EndingTableName IS NULL OR TABLE_NAME <= @EndingTableName)
ORDER BY TABLE_NAME

OPEN t
WHILE @Severity = 0
BEGIN
   DECLARE @TableName sysname
   FETCH t INTO @TableName

   IF @@FETCH_STATUS != 0
      BREAK

   -- Generate the trigger code:
   insert into #TriggerIupCode
   exec dbo.TriggerIupCodeSp @TableName

   IF EXISTS(SELECT 1 FROM #TriggerIupCode)
   BEGIN
      set @SQL = ''
      set @NonBlank = 0

      -- Compress the trigger code
      declare acCrs cursor local fast_forward for
      select code_line
      from #TriggerIupCode
      order by seq

      open acCrs

      while @Severity = 0
      begin
         fetch acCrs into
           @CodeLine

         if @@fetch_status != 0
            break

         -- Commit each segment as we "go" (hehe)
         if @CodeLine = 'GO'
         begin
            -- Debugging: PRINT @SQL
            IF @NonBlank = 1
               EXECUTE (@SQL)
            SET @SQL = ''
            SET @NonBlank = 0
         end
         else
         begin
            -- Avoid committing SQL code with only blank lines
            if @CodeLine is not null and @CodeLine != ''
               set @NonBlank = 1

            if @SQL = ''
               set @SQL = isnull(@CodeLine, N'')
            else
               set @SQL = @SQL + @NewLine + isnull(@CodeLine, N'')
         end
      end
      close acCrs
      deallocate acCrs

      if @SQL != ''
      and @NonBlank = 1
      begin
         -- Debugging: PRINT @SQL
         EXECUTE (@SQL)
         SET @SQL = ''
         SET @NonBlank = 0
      end

      /* RS9110 - Selectively regenerate views and triggers */
	  DECLARE @NewHash	HashStateType
	  SET @NewHash = dbo.GetTableStateHash(@TableName)
	  EXEC InsertUpdateTableStateSp @TableName = @TableName, @TriggerState = @NewHash		-- update record with new hash

      SET @TablesProcessed = @TablesProcessed + 1
   END
      
   DELETE FROM #TriggerIupCode
   
END
CLOSE t
DEALLOCATE t

--  Do not do this unless one of the triggers involved is associated with a table in
-- the input range.
IF EXISTS (SELECT TABLE_NAME FROM SchemaTablesView WITH (READPAST, READCOMMITTEDLOCK)
INNER JOIN sys.triggers st ON
  object_name(st.parent_id) = TABLE_NAME
INNER JOIN AppTrigger atr ON
  atr.TriggerName = st.name
WHERE TABLE_TYPE <> N'VIEW'
AND (@StartingTableName IS NULL OR TABLE_NAME >= @StartingTableName)
AND (@EndingTableName IS NULL OR TABLE_NAME <= @EndingTableName)
)
BEGIN
   EXEC dbo.TriggerInsertAppCodeSp @Infobar OUTPUT
END

EXEC
   -- Workaround Issue 115295!   @Severity =
   dbo.MsgAppSp @Infobar OUTPUT,
   N'I=#Processed',
   @TablesProcessed,
   N'@!sysobjects:U'

RETURN @Severity

GO

