SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

IF OBJECT_ID('[dbo].[ConvertTableToMultiSiteTableSp]') IS NOT NULL
   DROP PROCEDURE [dbo].[ConvertTableToMultiSiteTableSp]
GO
/* $Header: ApplicationDB\PreTableObjects\ConvertTableToMultiSiteTableSp.sp 10.1.0.1 03/30/2018 14:27:32 */

/*
***************************************************************
*                                                             *
*                           NOTICE                            *
*                                                             *
*   THIS SOFTWARE IS THE PROPERTY OF AND CONTAINS             *
*   CONFIDENTIAL INFORMATION OF INFOR AND/OR ITS AFFILIATES   *
*   OR SUBSIDIARIES AND SHALL NOT BE DISCLOSED WITHOUT PRIOR  *
*   WRITTEN PERMISSION. LICENSED CUSTOMERS MAY COPY AND       *
*   ADAPT THIS SOFTWARE FOR THEIR OWN USE IN ACCORDANCE WITH  *
*   THE TERMS OF THEIR SOFTWARE LICENSE AGREEMENT.            *
*   ALL OTHER RIGHTS RESERVED.                                *
*                                                             *
*   (c) COPYRIGHT 2018 INFOR.  ALL RIGHTS RESERVED.           *
*   THE WORD AND DESIGN MARKS SET FORTH HEREIN ARE            *
*   TRADEMARKS AND/OR REGISTERED TRADEMARKS OF INFOR          *
*   AND/OR ITS AFFILIATES AND SUBSIDIARIES. ALL RIGHTS        *
*   RESERVED.  ALL OTHER TRADEMARKS LISTED HEREIN ARE         *
*   THE PROPERTY OF THEIR RESPECTIVE OWNERS.                  *
*                                                             *
***************************************************************
*/


/* $Archive: /Tools/SQLScripts/ApplicationDB/PreTableObjects/ConvertTableToMultiSiteTableSp.sp $
 *
 * CoreDev 12 248405 DJohnson Thu Oct 04
 * Add dbo. schema to path where missing.
 *
 * CoreDev 11 222243 Bharbron Tue Dec 13 13:39:11 2016
 * Snapshot tables don't appear to include Site data, and so any site can see any other sites Snapshots.  Is that something that's been missed or is it something I've missed?
 * 222243 - Changing WBSnapshot to multi-site table
 *
 * CoreDev 10 219250 Mhuston Wed Aug 31 15:55:10 2016
 * Incorporate upgrade performance enhancements of 9.01 upgrade into CoreDev and 9.00 converting to _mst tables
 * Issue 219250 - implement chunking for log file optimization; RAISERROR messages; check if records exist before attempting copy; drop table only if no records remain after copy (preserves data in the event of error)
 *
 * CoreDev 9 216047 Mmarsolo Thu Jul 14 14:21:45 2016
 * Remediate SQL Injection Risk for RC4 List, No CoreDev
 * 216047 - SQL injection remediation, use QUOTENAME in place of hardcoded [].
 *
 * CoreDev 8 200821 Mhuston Tue Aug 18 12:31:58 2015
 * Changes to 9.00 Upgrade scripts to improve performance
 * Issue 200821 - change to apply constraints and nonclustered indexes after data insert
 *
 * CoreDev 7 167882 Jray Fri Sep 06 16:37:55 2013
 * Modifications needed to ConvertTableToMultiSiteTableSp
 * Issue 167882: Added brackets around column names to eliminate issues related to columns that have names matching SQL reserved words.
 *
 * $NoKeywords: $
 */
CREATE PROCEDURE [dbo].[ConvertTableToMultiSiteTableSp]
   @DatabaseName ObjectNameType
 , @DatabaseSchema ObjectNameType
 , @OrigTableName ObjectNameType
 , @Site SiteType
 , @SiteColumn ColumnNameType
 , @FullTextIndexString [NVARCHAR](max) OUTPUT
 , @Infobar InfobarType OUTPUT
 , @ModuleName AppModuleType = NULL
 , @PUpdate_AllWhen LongListType = NULL
 , @PUpdateRecordDateWhen LongListType = NULL 
 , @PIgnoreInsert ListYesNoType = 0
 , @PIgnoreUpdate ListYesNoType = 0
 , @PDisallowUpdate ListYesNoType = 0
 , @PKeepClusteringKeys ListYesNoType = 0
 , @PUseRPOnInsert ListYesNoType = 0
 , @PUseRPOnUpdate ListYesNoType = 0
 , @PIupTriggerModifiesNewRows ListYesNoType = 0
 , @PRememberIdentity ListYesNoType = 0
 , @PRegisterNewKey ListYesNoType = 0
 , @PTestOutsideLockForNewKey ListYesNoType = 0
 , @PNextKeyReverseKeyOrder ListYesNoType = 0
 , @PInheritorTableList LongListType = NULL
AS
-- Check for existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp and inserted by CallETPs.exe):
IF OBJECT_ID(N'dbo.EXTGEN_ConvertTableToMultiSiteTableSp') IS NOT NULL
BEGIN
   DECLARE @EXTGEN_SpName sysname
   SET @EXTGEN_SpName = N'dbo.EXTGEN_ConvertTableToMultiSiteTableSp'
   -- Invoke the ETP routine, passing in (and out) this routine's parameters:
   DECLARE @EXTGEN_Severity int 
   EXEC @EXTGEN_Severity = @EXTGEN_SpName 
      @DatabaseName
    , @DatabaseSchema
    , @OrigTableName
    , @Site
    , @SiteColumn
    , @FullTextIndexString OUTPUT
    , @Infobar OUTPUT
     
 -- ETP routine can RETURN 1 to signal that the remainder of this standard routine should now proceed: 
   IF @EXTGEN_Severity <> 1 
      RETURN @EXTGEN_Severity 
END 
-- End of Generic External Touch Point code. 

----============================================================================================
----============================================================================================
--- 1. Declare variables and temp tables ------------------------------------------------------------------------------
DECLARE
   @Severity INT
 , @MultiSiteTableName ObjectNameType
 , @MultiSiteTableSuffix [NVARCHAR] (4)
 , @REMessage NVARCHAR(MAX)
 , @ShowMessages TINYINT
 , @ConstraintName NVARCHAR(MAX)
 , @SQL NVARCHAR(MAX)
 , @SqlCreateTableText NVARCHAR(MAX)
 , @ColumnList NVARCHAR(MAX)
 , @DeletedColumnList NVARCHAR(MAX)
 , @IdentityInsertText NVARCHAR(100)
 , @IdentityInsertOn NVARCHAR(100)
 , @IdentityInsertOff NVARCHAR(100)
 , @SqlInsertMultiSiteTableText NVARCHAR(MAX)
 , @SqlDropTableText NVARCHAR(MAX)
 , @CopyPass INT
 , @SQLParmDefinition NVARCHAR(100)

SET @Infobar = NULL
SET @ShowMessages = 0
SET @MultiSiteTableSuffix = N'_mst'

DECLARE @TableText TABLE (
   CodeLine   NVARCHAR(MAX) NOT NULL
 , CreateOnly TINYINT DEFAULT(1) NULL
 , RowPointer INT IDENTITY(1,1)  NOT NULL
 , Altered TINYINT DEFAULT(0)
)

IF @OrigTableName LIKE N'%[_]all'
   SET @MultiSiteTableName = REPLACE(@OrigTableName, N'_all', @MultiSiteTableSuffix + N'_all')
ELSE
   SET @MultiSiteTableName = @OrigTableName + @MultiSiteTableSuffix

--Does multi-site table already exist?
IF OBJECTPROPERTY(OBJECT_ID(@MultiSiteTableName),N'IsUserTable') = 1
 BEGIN
   SET @REMessage=CONVERT(VARCHAR(10), GETDATE(), 101) + N' ' + LTRIM(RIGHT(CONVERT(CHAR(20), GETDATE(), 22), 11)) + N' ' +  QUOTENAME(@MultiSiteTableName) + N' already present - no further processing ' RAISERROR(@REMessage, 0, 1) WITH NOWAIT
   RETURN 0
 END

SET @REMessage=CONVERT(VARCHAR(10), GETDATE(), 101) + N' ' + LTRIM(RIGHT(CONVERT(CHAR(20), GETDATE(), 22), 11)) + N'  Begin ' +  QUOTENAME(@MultiSiteTableName) RAISERROR(@REMessage, 0, 1) WITH NOWAIT

----============================================================================================
----============================================================================================
--- 2. Capture original table script components; divide into barebones and addl components; add @SiteColumn column ----------------

INSERT INTO @TableText (CodeLine)
EXEC [dbo].[MultiSiteTableScriptSp] 
   @DatabaseSchema
 , @OrigTableName
 , @MultiSiteTableSuffix
 , @SiteColumn
   --Expected results....
   --CREATE TABLE customer_mst (
   --  [site_ref] SiteType NOT NULL CONSTRAINT [DF_customer_mst_site_ref] DEFAULT (cast(CONTEXT_INFO() as NVARCHAR(8)))
   --  [cust_num] CustNumType NOT NULL 
   --, [cust_seq] CustSeqType NOT NULL CONSTRAINT [DF_customer_mst_cust_seq] DEFAULT ((0))
   --, [contact##1] ContactType NULL 
   --.
   --.
   --, CONSTRAINT [CK_customer_mst_use_revision_pay_days] CHECK ([use_revision_pay_days]=(0) OR [use_revision_pay_days]=(1))
   --, CONSTRAINT [IX_customer_mst_RowPointer] UNIQUE NONCLUSTERED (RowPointer)
   --, CONSTRAINT [PK_customer_mst] PRIMARY KEY CLUSTERED (cust_num, cust_seq, site_ref)
   --)
   --.
   --.
   --CREATE NONCLUSTERED INDEX [IX_customer_mst_delterm] ON customer_mst (delterm)
   --.
   --.

--Delete any foreign key references; these will be added back later as part of another script
DELETE FROM @TableText
   WHERE (CodeLine LIKE '%FOREIGN KEY%')	

--Store off Full-Text Index if one existed & Delete from @TableText
--This will be used to add Full-Text Index to new Multi-Site Table
SELECT @FullTextIndexString = COALESCE(@FullTextIndexString + N' ',N'') + CodeLine
FROM @TableText
WHERE 1=1
  AND (CodeLine LIKE '%FULLTEXT INDEX%')

DELETE FROM @TableText
   WHERE (CodeLine LIKE '%FULLTEXT INDEX%')

----============================================================================================
----============================================================================================
--- 3. Create Multi-Site Table ----------------------------------------------------------------------------------------

----Concatenate all CREATE TABLE commands

--Create table with columns, default constraints, and clustered index only
SELECT @SqlCreateTableText = COALESCE(@SqlCreateTableText + N' ',N'') + [CodeLine]
FROM @TableText
WHERE 1=1
AND ([CodeLine] NOT LIKE ', CONSTRAINT%' OR [CodeLine] LIKE '% CLUSTERED %')
AND [CodeLine] NOT LIKE 'CREATE %INDEX%'
ORDER BY [RowPointer]

SELECT @SqlCreateTableText = COALESCE(@SqlCreateTableText + N' ',N'') + [CodeLine]
FROM @TableText
WHERE 1=1
AND [CodeLine] LIKE 'CREATE CLUSTERED INDEX%'
ORDER BY [RowPointer]

IF @SqlCreateTableText IS NOT NULL
BEGIN
   SET @REMessage=CONVERT(VARCHAR(10), GETDATE(), 101) + N' ' + LTRIM(RIGHT(CONVERT(CHAR(20), GETDATE(), 22), 11)) + N'   create ' +  QUOTENAME(@MultiSiteTableName) + N' with only clustered index' IF @ShowMessages=1 RAISERROR(@REMessage, 0, 1) WITH NOWAIT
   EXEC sys.sp_executesql @SqlCreateTableText
END

------============================================================================================
------============================================================================================
------3b. Call SchemaAdditionalTasksSp to create AppTable row and partition empty multi-site table if needed ----
EXEC @Severity =  [dbo].[SchemaAdditionalTasksSp]
     @MultiSiteTableName
   , @MultiSiteTableName
   , @Infobar OUTPUT
   , @ModuleName
   , @SiteColumn
   , @PUpdate_AllWhen
   , @PUpdateRecordDateWhen
   , @PIgnoreInsert
   , @PIgnoreUpdate
   , @PDisallowUpdate
   , @PKeepClusteringKeys
   , @PUseRPOnInsert
   , @PUseRPOnUpdate
   , @PIupTriggerModifiesNewRows
   , @PRememberIdentity
   , @PRegisterNewKey
   , @PTestOutsideLockForNewKey
   , @PNextKeyReverseKeyOrder
   , @PInheritorTableList
   , 1 --SkipViewGen - can't generate view until step 6
   , 1 --SkipTriggerGen

IF @Severity != 0
   RETURN @Severity

------============================================================================================
------============================================================================================
------4. Copy data from old table to new Multi-Site Colum; default site data into new column ----------------------------

---- Only do this for non _all tables as Update _All Table utility will handle repopulating _all tables from base tables
---- and tables having rows (skip if no data present)

IF @MultiSiteTableName NOT LIKE N'%[_]all' --non_mst table not an _all table
AND OBJECTPROPERTY(OBJECT_ID(@OrigTableName),N'IsUserTable') = 1 --non_mst table must exist as table
AND EXISTS(SELECT 1 FROM sys.dm_db_partition_stats AS [dbp] -- non_mst table must have rows before copying
           WHERE 1=1 
	       AND @OrigTableName = OBJECT_NAME([dbp].[object_id]) 
		   AND [dbp].[index_id] < 2
		   AND [dbp].[row_count] > 0--http://stackoverflow.com/questions/6069237/fastest-way-to-count-exact-number-of-rows-in-a-very-large-table
		  )
BEGIN
  --Remove @OrigTableName indexes and unique constraints leaving primary key/clustered index to increase delete performance

	SELECT @SQL=STUFF(((
            SELECT N';' + 
		    N'DROP INDEX ' + QUOTENAME([i].[name]) + N' ON ' + QUOTENAME(OBJECT_SCHEMA_NAME([i].[object_id])) + N'.' + QUOTENAME(OBJECT_NAME([i].[object_id])) 
		    FROM sys.indexes [i]
		    INNER JOIN sys.objects [o] ON [o].[object_id] = [i].[object_id]
		    WHERE 1=1
		    AND [o].[name] NOT IN ('dtproperties','sysdiagrams')  -- not true user tables
		    AND [i].[is_primary_key] = 0
		    AND [i].[is_unique_constraint] = 0
		    AND [o].[name]=@OrigTableName
	        FOR XML PATH (''),TYPE).value('.[1]', 'nvarchar(max)')
		   ),1,1,N'')

	 EXEC sys.sp_executesql @SQL

	SELECT @SQL=STUFF(((
	            SELECT N';' + 
		        N'ALTER TABLE ' + QUOTENAME(OBJECT_SCHEMA_NAME([kc].[parent_object_id])) + N'.' + QUOTENAME(OBJECT_NAME([kc].[parent_object_id])) 
		        +N' DROP CONSTRAINT ' + QUOTENAME(OBJECT_NAME([kc].[object_id])) 
		        FROM sys.key_constraints [kc]
		        WHERE 1=1
		        AND [kc].[name] IN (SELECT [i].[name]
							      FROM sys.indexes [i]
						         )
		         AND [kc].[type]='UQ'
		         AND OBJECT_NAME([kc].[parent_object_id])=@OrigTableName
	             FOR XML PATH (''),TYPE).value('.[1]', 'nvarchar(max)')),1,1,N'')
				 
	EXEC sys.sp_executesql @SQL  

  --Get table columns
  --Build column list of select & insert
   SELECT  @ColumnList=STUFF((( SELECT  N',' + QUOTENAME(ISC.COLUMN_NAME) AS [text()]
                               FROM INFORMATION_SCHEMA.COLUMNS ISC
                               INNER JOIN sys.columns AS sc ON OBJECT_NAME(sc.object_id) = ISC.TABLE_NAME
                               AND sc.name = ISC.COLUMN_NAME
                               LEFT OUTER JOIN INFORMATION_SCHEMA.COLUMN_DOMAIN_USAGE ISCDU ON ISCDU.COLUMN_NAME = ISC.COLUMN_NAME
                               AND ISCDU.TABLE_NAME = ISC.TABLE_NAME
                               AND ISCDU.TABLE_SCHEMA = ISC.TABLE_SCHEMA
                               WHERE 1=1
                               AND ISC.TABLE_NAME = @OrigTableName
                               AND ISC.TABLE_SCHEMA = @DatabaseSchema
                               AND sc.is_computed = 0
                               AND ISC.DATA_TYPE <> 'timestamp'
                               ORDER BY ISC.COLUMN_NAME
                               FOR XML PATH (''),TYPE).value('.[1]', 'nvarchar(max)')),1,1,N'')

   SET @DeletedColumnList = REPLACE(@ColumnList,N'[',N'[deleted].[')

   --Determine if table has column identified as IDENTITY.  if so, turn IDENTITY_INSERT property ON
     SET @IdentityInsertOn=N' '
     SET @IdentityInsertOff=N' '
     IF EXISTS (SELECT 1 FROM sys.columns WHERE object_id=OBJECT_ID(@OrigTableName) AND ISNULL(is_identity,0)=1)
     BEGIN
        SET @IdentityInsertText = N'SET IDENTITY_INSERT ' + QUOTENAME(@DatabaseSchema) + N'.' + QUOTENAME(@MultiSiteTableName) 
        SET @IdentityInsertOn=@IdentityInsertText + N' ON '
        SET @IdentityInsertOff=@IdentityInsertText + N' OFF '
     END

  --Delete non-multisite data & insert data into new multi-site table using logfile optimization of 100000 rows at a time
  --using no where clause, delete will utilize clustered index therefore quick retrieval
    SET @CopyPass=1
    SET @SQLParmDefinition = N'@pShowMessages TINYINT '
    SET @REMessage=CONVERT(VARCHAR(10), GETDATE(), 101) + N' ' + LTRIM(RIGHT(CONVERT(CHAR(20), GETDATE(), 22), 11)) + N'   copy data from ' + QUOTENAME(@OrigTableName) + N' to ' + QUOTENAME(@MultiSiteTableName) IF @ShowMessages = 1 RAISERROR(@REMessage, 0, 1) WITH NOWAIT
    SET @SQL = 
		N'ALTER TABLE ' + QUOTENAME(@DatabaseSchema) + N'.' + QUOTENAME(@OrigTableName) + N' DISABLE TRIGGER ALL '
	  + @IdentityInsertOn
	  + N'DECLARE @pCopyPass INT = 0 '
	  + N'DECLARE @pREMessage NVARCHAR(MAX) '
	  + N' WHILE 1=1 '
	  + N' BEGIN ' 
	  + N'   BEGIN TRANSACTION '
	  + N'   SET @pCopyPass += 1 '
	  + N'     DELETE TOP (100000) ' 
      + N'     FROM ' + QUOTENAME(@DatabaseSchema) + N'.' + QUOTENAME(@OrigTableName)
      + N'     OUTPUT ' + @DeletedColumnList 
      + N'     INTO ' + QUOTENAME(@DatabaseSchema) + N'.' + QUOTENAME(@MultiSiteTableName) + N' (' + @ColumnList + N') '
	  + N'   IF @@ROWCOUNT=0 '
	  + N'    BEGIN '
	  + N'      COMMIT TRANSACTION '
	  + N'      BREAK '
	  + N'    END '
	  + N'   SET @pREMessage=CONVERT(VARCHAR(10), GETDATE(), 101) + N'' '' + LTRIM(RIGHT(CONVERT(CHAR(20), GETDATE(), 22), 11)) + N''        iteration #: '' + CAST(@pCopyPass AS NVARCHAR(MAX)) + N'' of <=100000 rows'' IF @pShowMessages = 1 RAISERROR(@pREMessage, 0, 1) WITH NOWAIT '
	  + N'   COMMIT TRANSACTION '
	  + N' END '
	  + @IdentityInsertOff

    EXEC sys.sp_executesql @SQL,@SQLParmDefinition,@pShowMessages=@ShowMessages

END
ELSE
 BEGIN
      SET @REMessage=CONVERT(VARCHAR(10), GETDATE(), 101) + N' ' + LTRIM(RIGHT(CONVERT(CHAR(20), GETDATE(), 22), 11)) + N'   data not copied from ' + QUOTENAME(@OrigTableName) + N' (_all table or no data present)' IF @ShowMessages=1 RAISERROR(@REMessage, 0, 1) WITH NOWAIT
 END

----5. Drop old table -------------------------------------------------------------------------------------------------
DECLARE @DropTest INT = 1
SET @SQLParmDefinition = N'@pDropTest INT OUTPUT'
SET @SQL = N'SELECT @pDropTest=COUNT(1) FROM ' + QUOTENAME(@DatabaseSchema) + N'.' + QUOTENAME(@OrigTableName)
EXEC sys.sp_executesql @SQL,@SQLParmDefinition,@DropTest OUTPUT

IF @OrigTableName LIKE N'%[_]all'
 BEGIN 
  SET @SqlDropTableText = N'IF EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N''' + QUOTENAME(@DatabaseSchema) + N'.' + QUOTENAME(@OrigTableName) + N''') AND TYPE IN (N''U'')) '
					    + N'DROP TABLE ' + QUOTENAME(@DatabaseSchema) + N'.' + QUOTENAME(@OrigTableName) 
  SET @DropTest = 0
 END
ELSE
 SET @SqlDropTableText = N'IF EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N''' + QUOTENAME(@DatabaseSchema) + N'.' + QUOTENAME(@OrigTableName) + N''') AND TYPE IN (N''U'')) '
                       + N'AND NOT EXISTS (SELECT 1 FROM ' + QUOTENAME(@DatabaseSchema) + N'.' + QUOTENAME(@OrigTableName) + N')  '
					   + N'DROP TABLE ' + QUOTENAME(@DatabaseSchema) + N'.' + QUOTENAME(@OrigTableName)

IF  @SqlDropTableText IS NOT NULL
AND @DropTest = 0 -- perform drop only when no records present in original table or original table is an _all table
BEGIN
   SET @REMessage=CONVERT(VARCHAR(10), GETDATE(), 101) + N' ' + LTRIM(RIGHT(CONVERT(CHAR(20), GETDATE(), 22), 11)) + N'   drop table ' + QUOTENAME(@OrigTableName) IF @ShowMessages=1 RAISERROR(@REMessage, 0, 1) WITH NOWAIT
   EXEC sys.sp_executesql @SqlDropTableText
END
ELSE
 BEGIN
   SET @REMessage=CONVERT(VARCHAR(10), GETDATE(), 101) + N' ' + LTRIM(RIGHT(CONVERT(CHAR(20), GETDATE(), 22), 11)) + N'   (' + CAST(@DropTest AS NVARCHAR) + N') records exist - unable to drop table ' + QUOTENAME(@OrigTableName) IF @ShowMessages=1 RAISERROR(@REMessage, 0, 1) WITH NOWAIT
   RETURN 16
 END


--5.5 Create constraints & indexes after insert
	DECLARE @CreateCkConstraintsIndexes TABLE (
	 [SqlStmt] NVARCHAR(MAX)
	)
	SET @REMessage=CONVERT(VARCHAR(10), GETDATE(), 101) + N' ' + LTRIM(RIGHT(CONVERT(CHAR(20), GETDATE(), 22), 11)) + N'   apply constraints & indexes to ' + QUOTENAME(@MultiSiteTableName) IF @ShowMessages=1 RAISERROR(@REMessage, 0, 1) WITH NOWAIT

	INSERT INTO @CreateCkConstraintsIndexes ([SqlStmt])
	SELECT 
	 'ALTER TABLE ' + QUOTENAME(N'dbo') + N'.' + QUOTENAME(@MultiSiteTableName) + ' WITH NOCHECK ADD ' + SUBSTRING([CodeLine],2,9999)--check constraints (strips off leading comma)
	FROM @TableText
	WHERE 1=1
	AND ([CodeLine] LIKE ', CONSTRAINT%' AND [CodeLine] NOT LIKE '% CLUSTERED %')
	AND [CodeLine] NOT LIKE 'CREATE %INDEX%'
	UNION
	SELECT 
	 [CodeLine]--indexes
	FROM @TableText
	WHERE 1=1
	AND [CodeLine] LIKE 'CREATE NONCLUSTERED INDEX%'

	WHILE EXISTS (SELECT 1 FROM @CreateCkConstraintsIndexes)
	BEGIN
	    SELECT TOP 1
		 @SQL=[SqlStmt]
		FROM @CreateCkConstraintsIndexes

  		EXEC sys.sp_executesql @SQL

	    DELETE @CreateCkConstraintsIndexes WHERE [SqlStmt]=@SQL
	END

----============================================================================================
----============================================================================================
----6. Create View with Original Table Name over New Multi-Site Table -------------------------------------------------

DECLARE @IncludeSiteRefFilter ListYesNoType = 0
SET @IncludeSiteRefFilter = CASE
                               WHEN @OrigTableName LIKE N'%[_]all' THEN
                                  0
                               ELSE
                                  1
                            END
SET @REMessage=CONVERT(VARCHAR(10), GETDATE(), 101) + N' ' + LTRIM(RIGHT(CONVERT(CHAR(20), GETDATE(), 22), 11)) + N'   create view over ' +  QUOTENAME(@MultiSiteTableName) IF @ShowMessages=1 RAISERROR(@REMessage, 0, 1) WITH NOWAIT

EXECUTE @Severity = [dbo].[RegenerateSiteViewSp]
   @TableName = @MultiSiteTableName
 , @IncludeSiteRefFilter = @IncludeSiteRefFilter 
 , @Infobar = @Infobar OUTPUT

IF @Severity != 0
   RETURN @Severity
----============================================================================================
----============================================================================================
SET @REMessage=CONVERT(VARCHAR(10), GETDATE(), 101) + N' ' + LTRIM(RIGHT(CONVERT(CHAR(20), GETDATE(), 22), 11)) + N'  Complete ' +  QUOTENAME(@MultiSiteTableName) RAISERROR(@REMessage, 0, 1) WITH NOWAIT	 

DELETE @TableText

----============================================================================================
----============================================================================================

RETURN 0
GO
