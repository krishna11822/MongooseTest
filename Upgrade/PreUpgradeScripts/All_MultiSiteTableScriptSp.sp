SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

IF OBJECT_ID('dbo.MultiSiteTableScriptSp') IS NOT NULL
   DROP PROCEDURE dbo.MultiSiteTableScriptSp
GO
/* $Header: ApplicationDB\Stored Procedures\MultiSiteTableScriptSp.sp 10.1.0.1 03/30/2018 14:27:36 */

/*
***************************************************************
*                                                             *
*                           NOTICE                            *
*                                                             *
*   THIS SOFTWARE IS THE PROPERTY OF AND CONTAINS             *
*   CONFIDENTIAL INFORMATION OF INFOR AND/OR ITS AFFILIATES   *
*   OR SUBSIDIARIES AND SHALL NOT BE DISCLOSED WITHOUT PRIOR  *
*   WRITTEN PERMISSION. LICENSED CUSTOMERS MAY COPY AND       *
*   ADAPT THIS SOFTWARE FOR THEIR OWN USE IN ACCORDANCE WITH  *
*   THE TERMS OF THEIR SOFTWARE LICENSE AGREEMENT.            *
*   ALL OTHER RIGHTS RESERVED.                                *
*                                                             *
*   (c) COPYRIGHT 2018 INFOR.  ALL RIGHTS RESERVED.           *
*   THE WORD AND DESIGN MARKS SET FORTH HEREIN ARE            *
*   TRADEMARKS AND/OR REGISTERED TRADEMARKS OF INFOR          *
*   AND/OR ITS AFFILIATES AND SUBSIDIARIES. ALL RIGHTS        *
*   RESERVED.  ALL OTHER TRADEMARKS LISTED HEREIN ARE         *
*   THE PROPERTY OF THEIR RESPECTIVE OWNERS.                  *
*                                                             *
***************************************************************
*/

/* $Archive: /Tools/SQLScripts/ApplicationDB/Stored Procedures/MultiSiteTableScriptSp.sp $
 *
 * CoreDev 14 252420 DJohnson Wed May 1 2019
 * Handle schema on object id.
 *
 * CoreDev 13 246495 Djohnson Jul 17 2018
 * Standardized the site column default.
 *
 * CoreDev 12 222427 Djohnson Mon Dec 05 14:45:14 2016
 * MultiSiteTableCreateSp fails.
 * Issue #222427 - let datatype function handle type quoting.
 *
 * CoreDev 11 189006 cqdayrit Fri Sep 18 04:48:40 2015
 * Modify to bracket column names to eliminate issue with keywords
 * 189006 - add bracket to eliminate errors
 *
 * CoreDev 10 188583 Jray Tue Dec 16 13:46:50 2014
 * CopyASite process fails when there are noteheader rows in the source db pointing to tables that do not exist
 * Issue 188583: Modify to handle bracketed column names
 *
 * CoreDev 9 181074 Jray Thu Jun 26 17:19:46 2014
 * SL8 to SL9 Upgrade Fails
 * Issue 181074: Add support for index included columns; Address issue with unique constraint name generation logic to remove brackets from column names
 *
 * $NoKeywords: $
 */
CREATE PROCEDURE [dbo].[MultiSiteTableScriptSp](
   @PDatabaseSchema ObjectNameType
 , @POrigTableName ObjectNameType
 , @PMultiSiteTableSuffix [NVARCHAR](4)
 , @PSiteColumn ColumnNameType
 )
AS
-- Check for existence of Generic External Touch Point routine (this section was generated by SpETPCodeSp and inserted by CallETPs.exe):
IF OBJECT_ID(N'dbo.EXTGEN_MultiSiteTableScriptSp') IS NOT NULL
BEGIN
   DECLARE @EXTGEN_SpName sysname
   SET @EXTGEN_SpName = N'dbo.EXTGEN_MultiSiteTableScriptSp'
   -- Invoke the ETP routine, passing in (and out) this routine's parameters:
   EXEC @EXTGEN_SpName
      @PDatabaseSchema
    , @POrigTableName
    , @PMultiSiteTableSuffix
    , @PSiteColumn

   -- ETP routine must take over all desired functionality of this standard routine:
   RETURN 0
END
-- End of Generic External Touch Point code.

DECLARE
  @MultiSiteTableName ObjectNameType
, @TableID             INT
, @SchemaOrigTableName ObjectNameType 

SET @SchemaOrigTableName = @PDatabaseSchema + N'.' + @POrigTableName
SET @TableID = OBJECT_ID(@SchemaOrigTableName)

--If Original Table is _all Table, then ensure that Multi-Site Table Suffix is inserted between base table name and _all suffix
IF @POrigTableName LIKE N'%[_]all'
   SET @MultiSiteTableName = REPLACE(@POrigTableName, N'_all', @PMultiSiteTableSuffix + N'_all')
ELSE
   SET @MultiSiteTableName = @POrigTableName + @PMultiSiteTableSuffix

DECLARE
   @TableText TABLE (
      CodeLine   NVARCHAR(MAX) NOT NULL
    , RowPointer INT IDENTITY  NOT NULL
   )

DECLARE
   @TableColumn TABLE (
      ColumnName   SYSNAME    NOT NULL
    , Colid        INT        NOT NULL
    , DefaultName  SYSNAME        NULL
    , DefaultValue NVARCHAR(3000) NULL
    , DataType     SYSNAME        NULL
    , ISNULLable   SYSNAME        NULL
    , ISIdentity   BIT            NULL
    , ComputedDef  NVARCHAR(3000) NULL
    , IsPersisted  BIT            NULL
   )

DECLARE
   @CheckConstraints TABLE (
      ConstraintName  SYSNAME        NOT NULL
    , ConstraintValue NVARCHAR(3000) NOT NULL
   )

--If _all table, then do not add @PSiteColumn column
IF @POrigTableName NOT LIKE N'%[_]all'
INSERT INTO @TableColumn (
   ColumnName
 , ColId
 , DataType
 , ISNULLable
 , DefaultName
 , DefaultValue
 , ISIdentity
 , ComputedDef
 , IsPersisted
) VALUES
( N'[' + @PSiteColumn + N']'
 , 1
 , N'[dbo].[SiteType]'
 , 0
 , N'DF_' + @MultiSiteTableName + N'_' + @PSiteColumn
 , N'(rtrim(CONVERT([nvarchar](8),context_info(),(0))))'
 , 0
 , NULL
 , 0
)

--Store off structure of original table
INSERT INTO @TableColumn (
   ColumnName
 , ColId
 , DataType
 , ISNULLable
 , DefaultName
 , DefaultValue
 , ISIdentity
 , ComputedDef
 , IsPersisted
) SELECT
   N'[' + sc.name + N']'
 , CASE
      WHEN @POrigTableName NOT LIKE N'%[_]all' THEN
         sc.column_id + 1
      ELSE
         sc.column_id
   END
 , dbo.DataTypeString(ISC.DOMAIN_NAME, ISC.DATA_TYPE
    , ISC.CHARACTER_MAXIMUM_LENGTH, ISC.NUMERIC_PRECISION, ISC.NUMERIC_SCALE)
 , ISC.IS_NULLABLE
 , CASE 
      WHEN @POrigTableName NOT LIKE N'%[_]all' AND ISNULL(scn.status, 0) & 5 = 5 THEN
         N'DF_' + @MultiSiteTableName + N'_' + sc.name
      ELSE
         NULL
   END
 , CASE 
      WHEN ISNULL(scn.status, 0) & 5 = 5 THEN
         sc1.text
      ELSE
         NULL
   END
 , sc.is_identity
 , scc.definition
 , scc.is_persisted
FROM sys.columns AS sc
LEFT OUTER JOIN sys.computed_columns scc on
  scc.object_id = sc.object_id
and scc.name = sc.name
INNER JOIN INFORMATION_SCHEMA.COLUMNS AS ISC
   ON ISC.TABLE_SCHEMA = @PDatabaseSchema
  AND ISC.TABLE_NAME = @POrigTableName
  AND ISC.COLUMN_NAME = sc.name
LEFT OUTER JOIN sys.sysconstraints AS scn
   ON scn.id = sc.object_id
  AND scn.colid = sc.column_id
  AND scn.status & 5 = 5 -- Check constraints handled separately, just defaults
LEFT OUTER JOIN sys.syscomments AS sc1
   ON sc1.id = scn.constid
WHERE @TableID = sc.object_id

INSERT INTO @CheckConstraints (
   ConstraintName
 , ConstraintValue
) SELECT
   CASE 
      WHEN OBJECT_NAME(scn.constid) LIKE (N'CK_'+ @POrigTableName +'%') THEN
         REPLACE(OBJECT_NAME(scn.constid), N'CK_' + @POrigTableName, N'CK_' + @MultiSiteTableName)
      ELSE
         N'CK_' + Object_name(scn.id) + '_mst_' + scol.name
   END
 , sc.text
FROM sys.sysconstraints AS scn
INNER JOIN sys.syscomments AS sc
   ON sc.id = scn.constid
INNER JOIN sys.syscolumns AS scol
   ON scol.id = scn.id
  AND scol.colid = scn.colid
WHERE 1 = 1
  AND @POrigTableName NOT LIKE N'%_all' 
  AND scn.id = @TableID
  AND scn.status & 4 = 4   -- Check constraint
  AND scn.status & 5 <> 5  -- Not a default

--Build script to create new Multi-Site Table
INSERT INTO @TableText (
   CodeLine
) VALUES (
   N'CREATE TABLE [' + @PDatabaseSchema + N'].[' + @MultiSiteTableName + N'] (')

--Columns/Default Constraints
INSERT INTO @TableText (
   CodeLine
) SELECT
   CASE
      WHEN ColId = 1 THEN
         '  '
      ELSE
         ', '
   END + 
   CASE
      WHEN ComputedDef IS NOT NULL THEN
         ColumnName + ' AS ' + ComputedDef +
         CASE
            WHEN IsPersisted = 1 THEN
               ' PERSISTED'
            ELSE
               ''
         END
      ELSE
         ColumnName + ' ' +  DataType +
         CASE
            WHEN ISIdentity = 1 THEN
               N' IDENTITY (1, 1) ' 
            ELSE
            ''
         END
   END +
   CASE
      WHEN ComputedDef IS NOT NULL THEN
         ''
      WHEN ISNULLable = 'Yes' THEN
         N' NULL '
      ELSE
         N' NOT NULL '
   END +
   CASE
      WHEN DefaultName IS NULL THEN
         ''
      ELSE
         N'CONSTRAINT ['+Defaultname + N'] DEFAULT ' + DefaultValue
   END
FROM @TableColumn
ORDER BY colid

--Check Constraints
INSERT INTO @TableText (
   CodeLine)
SELECT
   N', CONSTRAINT ' +'['+ ConstraintName + N'] CHECK ' + ConstraintValue
FROM @CheckConstraints

--Primary/Unique Constraints
INSERT INTO @TableText (
   CodeLine)
SELECT
   CASE
      WHEN ISTC.CONSTRAINT_TYPE = N'PRIMARY KEY' THEN
         N', CONSTRAINT [PK_' + @MultiSiteTableName + N'] '
      ELSE /* ISTC.CONSTRAINT_TYPE = 'UNIQUE' */
         CASE 
            WHEN ISTC.CONSTRAINT_NAME LIKE N'IX_'+@POrigTableName + N'%' THEN
               N', CONSTRAINT [' + REPLACE(ISTC.CONSTRAINT_NAME, N'IX_' + @POrigTableName, N'IX_' + @MultiSiteTableName ) +  '] '
            ELSE
               N', CONSTRAINT [IX_' + @MultiSiteTableName + '_' + REPLACE(REPLACE(REPLACE(dbo.PrimaryOrUniqueKeyString(ISTC.CONSTRAINT_NAME),'[',''),']',''),',','_') + '] '
         END
   END +
   CONSTRAINT_TYPE +
   CASE
      WHEN si.indid = 1 THEN
         N' CLUSTERED '
      ELSE
         N' NONCLUSTERED '
   END
   + '(' +
   CASE --Add PSiteColumn to all indexes of non _all tables AND Remove PSiteColumn from RowPointer constraint for _all tables
      WHEN @POrigTableName NOT LIKE N'%[_]all' THEN
         dbo.PrimaryOrUniqueKeyString(ISTC.CONSTRAINT_NAME) + N', ' + @PSiteColumn
      WHEN @POrigTableName LIKE N'%[_]all'
       AND EXISTS (SELECT * FROM INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE
                   WHERE 1 = 1
                     AND TABLE_NAME = @POrigTableName
                     AND CONSTRAINT_NAME = ISTC.CONSTRAINT_NAME
                     AND COLUMN_NAME = N'RowPointer') THEN
         REPLACE(dbo.PrimaryOrUniqueKeyString(ISTC.CONSTRAINT_NAME), N', ' + @PSiteColumn,'')
      ELSE
         dbo.PrimaryOrUniqueKeyString(ISTC.CONSTRAINT_NAME)
   END
   + ')' 
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS ISTC
INNER JOIN sysindexes AS si
   ON si.id = @TableID
  AND si.name = ISTC.CONSTRAINT_NAME
WHERE ISTC.TABLE_SCHEMA = @PDatabaseSchema
  AND ISTC.TABLE_NAME   = @POrigTableName
  AND ISTC.CONSTRAINT_TYPE IN (N'PRIMARY KEY',N'UNIQUE')

INSERT INTO @TableText (
   CodeLine)
VALUES (')')

/* Indexes */
INSERT INTO @TableText (
   CodeLine)
SELECT
   N'CREATE ' +
   CASE
      WHEN INDEXPROPERTY(@TableID, si.name, N'IsUnique') = 1 THEN
         N'UNIQUE ' 
      ELSE
         ''
      END +
   CASE
      WHEN si.indid = 1 THEN
         N'CLUSTERED'
      ELSE
         N'NONCLUSTERED'
   END +
   CASE --Add PSiteColumn column to all indexes for non _all tables
      WHEN si.name LIKE ( ( N'IX[_]' + @POrigTableName + N'[_]' ) + N'%' )
      THEN N' INDEX [' 
            + REPLACE(si.name , ( N'IX'+ NCHAR(95) + @POrigTableName )
                                 , N'IX_' 
                                 + @MultiSiteTableName
                                   )
            + N']' 
      ELSE N' INDEX [' 
            + N'IX_' 
            + @MultiSiteTableName
            + N'_'
            + REPLACE(REPLACE(REPLACE(dbo.IndexKeyString(si.name,@SchemaOrigTableName),'[',''),']',''),',','_')
            + N']'
   END + N' ON [' + @PDatabaseSchema + N'].[' + @MultiSiteTableName + N'] ('
   + CASE
      WHEN PATINDEX ( N'%'+@PSiteColumn+N'%' , (SELECT dbo.IndexKeyString(si.name,@SchemaOrigTableName))) = 0
      THEN (SELECT dbo.IndexKeyString(si.name,@SchemaOrigTableName)) + N', [' + @PSiteColumn + ']'  -- Not present, place on end.  
      WHEN PATINDEX ( @PSiteColumn+N',%' , (SELECT dbo.IndexKeyString(si.name,@SchemaOrigTableName))) > 0
      THEN REPLACE((SELECT dbo.IndexKeyString(si.name,@SchemaOrigTableName)), @PSiteColumn+N',' , N'' ) + N', [' + @PSiteColumn + ']' -- Pull it from early loc and place on end.  
      ELSE (SELECT dbo.IndexKeyString(si.name,@SchemaOrigTableName)) -- Leave as is.  
     END
   + ')' 
   + CASE
        WHEN EXISTS (SELECT 1 FROM sys.index_columns sic
                        WHERE sic.object_id = @TableID
                          AND sic.index_id  = si.indid
                          AND sic.is_included_column = 1)
        THEN N' INCLUDE (' + dbo.IndexIncludeColumnString(si.name,@SchemaOrigTableName) + N')'
        ELSE ''
     END
FROM sysindexes AS si
WHERE si.id = @TableID
  AND si.status & 64 = 0 -- Ignores statistics.  Not supported. Future compatibility is not guaranteed. 
  AND si.indid > 0 -- If no clustered indexes, table itself must be ignored.
  AND si.indid <> 255 -- table contains ntext columns
  AND NOT EXISTS (
     SELECT 1
     FROM sysconstraints AS sc
     WHERE si.id = sc.id
       AND OBJECT_NAME(sc.constid) = si.name)   -- Ignore unique constraints

/* Full-Text Indexes */
--Full-Text indexes for *_mst tables are not supported as there is no available KEY INDEX upon which to base full-text index
INSERT INTO @TableText (
   CodeLine)
SELECT
   N'CREATE FULLTEXT INDEX ON [' + @MultiSiteTableName + '] ('
   + dbo.FullTextIndexColumnString(@SchemaOrigTableName)
   + ') KEY INDEX [' +
   CASE
      WHEN EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS ISTC
                      WHERE 1 = 1
                        AND ISTC.TABLE_NAME = @POrigTableName
                        AND ISTC.CONSTRAINT_TYPE = 'PRIMARY'
                        AND EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE ISCCU
                                       WHERE 1 = 1
                                         AND ISCCU.TABLE_NAME = @POrigTableName
                                         AND ISCCU.CONSTRAINT_NAME = ISTC.CONSTRAINT_NAME
                                         AND COLUMN_NAME = N'RowPointer')) THEN
         N'PK_' + @MultiSiteTableName
      ELSE N'IX_' + @MultiSiteTableName + N'_RowPointer'
   END
   + N'] ON ' + sftc.name
FROM sys.tables st
INNER JOIN sys.fulltext_indexes sfi ON sfi.object_id = st.object_id
INNER JOIN sys.fulltext_catalogs sftc ON sftc.fulltext_catalog_id = sfi.fulltext_catalog_id
WHERE 1 = 1
  AND st.name = @POrigTableName
  AND @MultiSiteTableName NOT LIKE '%[_]mst'

/* do not indent below lines */
DECLARE
   @NewLine LongListType
SET @NewLine = N'
'
/* do not indent above lines */

SELECT
   CodeLine + @NewLine
FROM @TableText
ORDER BY RowPointer

RETURN 0
GO
